     1 00000000                                 ;naskfunc
     2 00000000                                 ;TAB = 4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]					;制作目标文件的模式（将输出文件格式设定为WCOFF）
     5 00000000                                 [INSTRSET "i486p"]				;会把ECX解释为寄存器，而不是普通标号
     6 00000000                                 [BITS 32]						;制作32位模式下使用的机器语言
     7 00000000                                 
     8 00000000                                 ;制作目标文件的信息
     9 00000000                                 
    10 00000000                                 [FILE "naskfunc.nas"]			;源文件名信息
    11 00000000                                 
    12 00000000                                 		GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt			;程序中包含的函数名（需要链接的函数名要加上global声明，_为了与C语言函数链接）
    13 00000000                                 		GLOBAL _io_in8, _io_in16, io_in32
    14 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    15 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    16 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    17 00000000                                 		GLOBAL _load_cr0,_store_cr0
    18 00000000                                 		GLOBAL _asm_inthandler21,_asm_inthandler27,_asm_inthandler2c
    19 00000000                                 		GlOBAL _memtest_sub
    20 00000000                                 		EXTERN _inthandler21, _inthandler27, _inthandler2c
    21 00000000                                 		
    22 00000000                                 ;以下是实际的函数
    23 00000000                                 
    24                                          [SECTION .text]					;目标文件中写了这些之后再写程序
    25 00000000                                 
    26 00000000                                 _io_hlt:						;void io_hlt(void);  CPU暂停工作
    27 00000000 F4                              		HLT
    28 00000001 C3                              		RET
    29 00000002                                 
    30 00000002                                 _io_cli:	; void io_cli(void);
    31 00000002 FA                              		CLI
    32 00000003 C3                              		RET
    33 00000004                                 
    34 00000004                                 _io_sti:	; void io_sti(void);
    35 00000004 FB                              		STI
    36 00000005 C3                              		RET
    37 00000006                                 
    38 00000006                                 _io_stihlt:	; void io_stihlt(void);
    39 00000006 FB                              		STI
    40 00000007 F4                              		HLT
    41 00000008 C3                              		RET
    42 00000009                                 		
    43 00000009                                 _io_in8:
    44 00000009 8B 54 24 04                     		MOV 	EDX,[ESP+4]	;port
    45 0000000D B8 00000000                     		MOV 	EAX,0
    46 00000012 66 ED                           		IN		AX,DX
    47 00000014 C3                              		RET
    48 00000015                                 
    49 00000015                                 _io_in16:	; int io_in16(int port);
    50 00000015 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    51 00000019 B8 00000000                     		MOV		EAX,0
    52 0000001E 66 ED                           		IN		AX,DX
    53 00000020 C3                              		RET
    54 00000021                                 
    55 00000021                                 _io_in32:	; int io_in32(int port);
    56 00000021 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    57 00000025 ED                              		IN		EAX,DX
    58 00000026 C3                              		RET
    59 00000027                                 
    60 00000027                                 _io_out8:	; void io_out8(int port, int data);
    61 00000027 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    62 0000002B 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    63 0000002F EE                              		OUT		DX,AL
    64 00000030 C3                              		RET
    65 00000031                                 
    66 00000031                                 _io_out16:	; void io_out16(int port, int data);
    67 00000031 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    68 00000035 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    69 00000039 66 EF                           		OUT		DX,AX
    70 0000003B C3                              		RET
    71 0000003C                                 
    72 0000003C                                 _io_out32:	; void io_out32(int port, int data);
    73 0000003C 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    74 00000040 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    75 00000044 EF                              		OUT		DX,EAX
    76 00000045 C3                              		RET
    77 00000046                                 		
    78 00000046                                 _io_load_eflags:	; int io_load_eflags(void);
    79 00000046 9C                              		PUSHFD		; PUSH EFLAGS 
    80 00000047 58                              		POP		EAX
    81 00000048 C3                              		RET
    82 00000049                                 
    83 00000049                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    84 00000049 8B 44 24 04                     		MOV		EAX,[ESP+4]
    85 0000004D 50                              		PUSH	EAX
    86 0000004E 9D                              		POPFD		; POP EFLAGS 
    87 0000004F C3                              		RET
    88 00000050                                 
    89 00000050                                 _load_gdtr:
    90 00000050 66 8B 44 24 04                  		MOV		AX,[ESP+4]	;limit
    91 00000055 66 89 44 24 06                  		MOV		[ESP+6],AX
    92 0000005A 0F 01 54 24 06                  		LGDT	[ESP+6]
    93 0000005F C3                              		RET
    94 00000060                                 		
    95 00000060                                 _load_idtr:
    96 00000060 66 8B 44 24 04                  		MOV		AX,[ESP+4]
    97 00000065 66 89 44 24 06                  		MOV		[ESP+6],AX
    98 0000006A 0F 01 5C 24 06                  		LIDT	[ESP+6]
    99 0000006F C3                              		RET
   100 00000070                                 
   101 00000070                                 _load_cr0:				;int load_cr0(void);
   102 00000070 0F 20 C0                        		MOV 	EAX,CR0
   103 00000073 C3                              		RET
   104 00000074                                 
   105 00000074                                 _store_cr0:				;void store_cr0(int cr0);
   106 00000074 8B 44 24 04                     		MOV		EAX,[ESP+4]
   107 00000078 0F 22 C0                        		MOV		CR0,EAX
   108 0000007B C3                              		RET
   109 0000007C                                 
   110 0000007C                                 _asm_inthandler21:
   111 0000007C 06                              		PUSH	ES
   112 0000007D 1E                              		PUSH	DS
   113 0000007E 60                              		PUSHAD
   114 0000007F 89 E0                           		MOV		EAX,ESP
   115 00000081 50                              		PUSH	EAX
   116 00000082 66 8C D0                        		MOV		AX,SS
   117 00000085 8E D8                           		MOV		DS,AX
   118 00000087 8E C0                           		MOV		ES,AX
   119 00000089 E8 [00000000]                   		CALL	_inthandler21
   120 0000008E 58                              		POP 	EAX
   121 0000008F 61                              		POPAD
   122 00000090 1F                              		POP 	DS
   123 00000091 07                              		POP 	ES
   124 00000092 CF                              		IRETD
   125 00000093                                 		
   126 00000093                                 _asm_inthandler27:
   127 00000093 06                              		PUSH	ES
   128 00000094 1E                              		PUSH	DS
   129 00000095 60                              		PUSHAD
   130 00000096 89 E0                           		MOV		EAX,ESP
   131 00000098 50                              		PUSH	EAX
   132 00000099 66 8C D0                        		MOV		AX,SS
   133 0000009C 8E D8                           		MOV     DS,AX
   134 0000009E 8E C0                           		MOV		ES,AX
   135 000000A0 E8 [00000000]                   		CALL    _inthandler27
   136 000000A5 58                              		POP		EAX 
   137 000000A6 61                              		POPAD
   138 000000A7 1F                              		POP 	DS
   139 000000A8 07                              		POP		ES
   140 000000A9 CF                              		IRETD 
   141 000000AA                                 		
   142 000000AA                                 _asm_inthandler2c:
   143 000000AA 06                              		PUSH 	ES
   144 000000AB 1E                              		PUSH	DS
   145 000000AC 60                              		PUSHAD
   146 000000AD 89 E0                           		MOV		EAX,ESP
   147 000000AF 50                              		PUSH	EAX
   148 000000B0 66 8C D0                        		MOV		AX,SS
   149 000000B3 8E D8                           		MOV		DS,AX
   150 000000B5 8E C0                           		MOV		ES,AX
   151 000000B7 E8 [00000000]                   		CALL 	_inthandler2c
   152 000000BC 58                              		POP 	EAX 
   153 000000BD 61                              		POPAD
   154 000000BE 1F                              		POP 	DS
   155 000000BF 07                              		POP		ES
   156 000000C0 CF                              		IRETD
   157 000000C1                                 
   158 000000C1                                 _memtest_sub:
   159 000000C1 57                              		PUSH	EDI
   160 000000C2 56                              		PUSH	ESI
   161 000000C3 53                              		PUSH 	EBX
   162 000000C4 BE AA55AA55                     		MOV		ESI,0xaa55aa55	;pat0=0xaa55aa55;
   163 000000C9 BF 55AA55AA                     		MOV		EDI,0x55aa55aa	;pat1=0x55aa55aa;
   164 000000CE 8B 44 24 10                     		MOV		EAX,[ESP+12+4]	;i=start;
   165 000000D2                                 mts_loop:
   166 000000D2 89 C3                           		MOV		EBX,EAX
   167 000000D4 81 C3 00000FFC                  		ADD		EBX,0xffc		;p = i+0xffc;
   168 000000DA 8B 13                           		MOV		EDX,[EBX]		;old = *p
   169 000000DC 89 33                           		MOV 	[EBX],ESI 		;*p=pat0;
   170 000000DE 83 33 FF                        		XOR		DWORD [EBX],0xffffffff 
   171 000000E1 3B 3B                           		CMP 	EDI,[EBX]
   172 000000E3 75 18                           		JNE		mts_fin
   173 000000E5 83 33 FF                        		XOR		DWORD [EBX],0xffffffff
   174 000000E8 3B 3B                           		CMP 	EDI,[EBX]
   175 000000EA 75 11                           		JNE		mts_fin
   176 000000EC 89 13                           		MOV		[EBX],EDX
   177 000000EE 05 00001000                     		ADD		EAX,0x1000
   178 000000F3 3B 44 24 14                     		CMP     EAX,[ESP+12+8]
   179 000000F7                                 		
   180 000000F7 76 D9                           		JBE		mts_loop
   181 000000F9 5B                              		POP		EBX
   182 000000FA 5E                              		POP 	ESI
   183 000000FB 5F                              		POP		EDI
   184 000000FC C3                              		RET
   185 000000FD                                 mts_fin:
   186 000000FD 89 13                           		MOV		[EBX],EDX
   187 000000FF 5B                              		POP		EBX
   188 00000100 5E                              		POP		ESI
   189 00000101 5F                              		POP		EDI
   190 00000102 C3                              		RET
   191 00000103                                 		